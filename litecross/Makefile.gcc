OUTPUT = $(CURDIR)/output-gcc

BINUTILS_SRCDIR = BINUTILS_SRCDIR_not_set
GCC_SRCDIR = GCC_SRCDIR_not_set

MAKE_ARGS = 
GCC_CONFIG_FOR_TARGET = 
COMMON_CONFIG = 
GCC_CONFIG = 
MINGW_CRT_CONFIG = 
MINGW_HEADERS_CONFIG = 
OPTIMIZE_LEVEL = 
COMMON_FLAGS = -O2 -g0 -pipe -Wno-error -w
# COMMON_FLAGS += -fno-align-functions -fno-align-jumps -fno-align-loops -fno-align-labels

ifeq ($(OS),Windows_NT)
EXE_EXT = .exe
else
EXE_EXT =
endif

CC = gcc$(EXE_EXT)
CXX = g++$(EXE_EXT)
CFLAGS = 
CXXFLAGS = 
LDFLAGS = -s

ifeq ($(shell uname -s),Darwin)
STAT = 
else
STAT = -static --static
endif

-include config.mak

XGCC_DIR = $(CURDIR)/obj_gcc/gcc
XGCC = $(XGCC_DIR)/xgcc$(EXE_EXT) -B $(XGCC_DIR) -B $(CURDIR)/obj_sysroot/$(TARGET)/lib
XCPP = $(XGCC_DIR)/cpp$(EXE_EXT) -B $(XGCC_DIR)
XGXX = $(XGCC_DIR)/xg++$(EXE_EXT)
XAS = $(CURDIR)/obj_binutils/gas/as-new$(EXE_EXT)
XLD = $(CURDIR)/obj_binutils/ld/ld-new$(EXE_EXT)
XBINUTILS_DIR = $(CURDIR)/obj_binutils/binutils
XAR = $(XBINUTILS_DIR)/ar$(EXE_EXT)
XNM = $(XBINUTILS_DIR)/nm-new$(EXE_EXT)
XOBJCOPY = $(XBINUTILS_DIR)/objcopy$(EXE_EXT)
XOBJDUMP = $(XBINUTILS_DIR)/objdump$(EXE_EXT)
XRANLIB = $(XBINUTILS_DIR)/ranlib$(EXE_EXT)
XREADELF = $(XBINUTILS_DIR)/readelf$(EXE_EXT)
XSTRIP = $(XBINUTILS_DIR)/strip-new$(EXE_EXT)
XRC = $(XBINUTILS_DIR)/windres$(EXE_EXT) --preprocessor=$(XGCC_DIR)/xgcc$(EXE_EXT) --preprocessor-arg=-B --preprocessor-arg=$(XGCC_DIR) --preprocessor-arg=-I$(CURDIR)/obj_sysroot/$(TARGET)/include --preprocessor-arg=-E --preprocessor-arg=-xc-header --preprocessor-arg=-DRC_INVOKED -c 1252
DLLTOOL = $(XBINUTILS_DIR)/dlltool$(EXE_EXT)
LIBTOOL = $(XBINUTILS_DIR)/libtool$(EXE_EXT)

CFLAGS := $(strip $(COMMON_FLAGS) $(CFLAGS))
CXXFLAGS := $(strip $(COMMON_FLAGS) $(CXXFLAGS))

export CFLAGS
export CXXFLAGS
export LDFLAGS

ifneq ($(findstring musl,$(TARGET)),)
# build musl
MINGW_SRCDIR := 

GCC_CONFIG_FOR_TARGET += --enable-initfini-array \
	--disable-symvers \
	--enable-tls

ifneq ($(findstring fdpic,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --enable-fdpic
endif

# x86 configurations
ifneq ($(findstring x86_64,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=x86-64 --with-tune=generic
endif

ifneq ($(filter i486%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=i486 --with-tune=generic --enable-cld
endif

ifneq ($(filter i586%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=pentium-m --with-fpmath=sse --with-tune=generic --enable-cld
endif

ifneq ($(filter i686%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=i686 --with-fpmath=sse --with-tune=generic --enable-cld
endif

# ARM configurations
ifneq ($(filter aarch64%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=armv8-a --with-abi=lp64
endif

ifneq ($(filter arm-%eabi,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=armv5te --with-tune=arm926ej-s --with-float=soft --with-abi=aapcs-linux
endif

ifneq ($(filter arm-%eabihf,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=armv6kz --with-tune=arm1176jzf-s --with-fpu=vfpv2 --with-abi=aapcs-linux
endif

ifneq ($(filter armv5%eabi,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=armv5te --with-tune=arm926ej-s --with-float=soft --with-abi=aapcs-linux
endif

ifneq ($(filter armv6%eabi,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=armv6kz --with-tune=arm1176jzf-s --with-abi=aapcs-linux
ifneq ($(filter %hf,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-fpu=vfpv2
else
GCC_CONFIG_FOR_TARGET += --with-float=soft
endif
endif

ifneq ($(filter armv7%eabi,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=armv7-a --with-tune=generic-armv7-a --with-abi=aapcs-linux --with-mode=thumb
ifneq ($(filter %hf,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-fpu=vfpv3-d16
else
GCC_CONFIG_FOR_TARGET += --with-float=soft
endif
endif

# PowerPC configurations
ifneq ($(filter powerpc%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --enable-secureplt --enable-decimal-float=no
ifneq ($(findstring 64,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-abi=elfv2 --enable-targets=powerpcle-linux --with-cpu=970
endif
endif

# MIPS configurations
ifneq ($(filter mips%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-linker-hash-style=sysv --with-mips-plt
ifneq ($(findstring 64,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=mips3 --with-tune=mips64 --with-abi=64
else
GCC_CONFIG_FOR_TARGET += --with-arch=mips32 --with-abi=32
endif
endif

# S390x configurations
ifneq ($(filter s390x%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=z196 --with-tune=zEC12 --with-zarch --with-long-double-128
endif

# RISC-V configurations
ifneq ($(filter riscv64%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=rv64gc --with-abi=lp64d --enable-autolink-libatomic
endif

# LoongArch configurations
ifneq ($(filter loongarch64%,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-arch=la64v1.0 --with-abi=lp64d
endif

# ABI configurations
ifneq ($(filter %n32,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-abi=n32
endif

ifneq ($(filter %x32,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-abi=x32
endif

# Floating-point configurations
ifneq ($(filter %sf,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-float=soft
endif

ifneq ($(filter %hf,$(TARGET)),)
GCC_CONFIG_FOR_TARGET += --with-float=hard
endif

else
# build mingw
MUSL_SRCDIR := 
LINUX_SRCDIR := 

GCC_CONFIG_FOR_TARGET += --disable-sjlj-exceptions \
	--disable-dw2-exceptions \
	--enable-fully-dynamic-string \
	--enable-threads=posix

ifneq ($(findstring mingw,$(HOST)),)
GCC_CONFIG_FOR_TARGET += --disable-tls
else
GCC_CONFIG_FOR_TARGET += --enable-tls
endif

ifneq ($(findstring x86_64,$(TARGET)),)
# 64
MINGW_CRT_CONFIG += --disable-lib32 --enable-lib64
else
MINGW_CRT_CONFIG += --enable-lib32 --disable-lib64
endif

endif

MAKE += MULTILIB_OSDIRNAMES=
MAKE += INFO_DEPS= infodir=
MAKE += ac_cv_prog_lex_root=lex.yy
MAKE += MAKEINFO=false

ifeq ($(BUILD),)
GUESS = $(shell cd $(GCC_SRCDIR) && ./config.guess)
TARGET_CANON = $(shell cd $(GCC_SRCDIR) && ./config.sub $(TARGET))
BUILD = $(GUESS)$(if $(subst $(TARGET_CANON),,$(GUESS)),,xx)
endif

ifeq ($(HOST),)
# build cross
SYSROOT = /$(TARGET)
else
# build native
SYSROOT = /
endif

COMMON_CONFIG := --disable-werror \
	--disable-multilib \
	--disable-bootstrap \
	--disable-nls \
	--with-zstd=no \
	--enable-lto \
	--enable-deterministic-archives \
	--with-debug-prefix-map=$(CURDIR)= \
	--enable-compressed-debug-sections=none \
	$(COMMON_CONFIG) \
	--prefix= \
	--with-sysroot=$(SYSROOT) \
	--libdir=/lib \
	--build=$(BUILD) --target=$(TARGET)

GCC_CONFIG := --enable-languages=c,c++ \
	--disable-libmudflap --disable-libsanitizer \
	--disable-gnu-indirect-function \
	--disable-libmpx --disable-fixed-point \
	--enable-libstdcxx-time=yes --disable-libstdcxx-pch \
	--disable-libquadmath --disable-libquadmath-support \
	--enable-libstdcxx-filesystem-ts=yes \
	--enable-default-pie --enable-static-pie --enable-host-pie \
	--disable-decimal-float \
	--disable-cet \
	$(GCC_CONFIG)

# https://github.com/richfelker/musl-cross-make/issues/181
BINUTILS_CONFIG := --disable-gprofng \
	$(BINUTILS_CONFIG)

# when prefix is empty, msys will set prefix to /usr in config.site
export MSYSTEM_PREFIX=
export MSYS=winsymlinks:nativestrict

FULL_BINUTILS_CONFIG = $(COMMON_CONFIG) $(BINUTILS_CONFIG) \
	--disable-separate-code \
	$(BINUTILS_OVERRIDE)

FULL_GCC_CONFIG = $(COMMON_CONFIG) $(GCC_CONFIG) $(GCC_CONFIG_FOR_TARGET) \
	--with-build-sysroot=$(CURDIR)/obj_sysroot \
	$(GCC_OVERRIDE)

FULL_MUSL_CONFIG = $(MUSL_CONFIG) \
	--prefix= --host=$(TARGET)

FULL_MINGW_HEADERS_CONFIG = $(MINGW_CONFIG) $(MINGW_HEADERS_CONFIG) \
	--prefix= --host=$(TARGET) --enable-sdk=all \
	--enable-idl --enable-secure-api --with-sysroot=$(SYSROOT)

FULL_MINGW_CRT_CONFIG = $(MINGW_CONFIG) $(MINGW_CRT_CONFIG) \
	--prefix= --host=$(TARGET) --with-sysroot=$(SYSROOT)

FULL_MINGW_PTHREADS_CONFIG = $(MINGW_CONFIG) \
	--prefix= --host=$(TARGET) --with-sysroot=$(SYSROOT)

ifeq ($(HOST),)
# build cross
FULL_BINUTILS_CONFIG += --host=$(BUILD)
FULL_GCC_CONFIG += --host=$(BUILD)
GCC_MAKE_ARGS += AR_FOR_TARGET=$(XAR) \
	AS_FOR_TARGET=$(XAS) \
	LD_FOR_TARGET=$(XLD) \
	NM_FOR_TARGET=$(XNM) \
	OBJCOPY_FOR_TARGET=$(XOBJCOPY) \
	OBJDUMP_FOR_TARGET=$(XOBJDUMP) \
	RANLIB_FOR_TARGET=$(XRANLIB) \
	READELF_FOR_TARGET=$(XREADELF) \
	STRIP_FOR_TARGET=$(XSTRIP)

FULL_MUSL_CONFIG += CC="$(XGCC)" \
	LIBCC="../obj_gcc/$(TARGET)/libgcc/libgcc.a" \
	AR="$(XAR)" RANLIB="$(XRANLIB)"

FULL_MINGW_PTHREADS_CONFIG += RC="$(XRC)" \
	CC="$(XGCC)" \
	CXX="$(XGXX)" \
	CPP="$(XCPP)" CPPFLAGS="-I$(CURDIR)/obj_sysroot/$(TARGET)/include" \
	LD="$(XLD)" LDFLAGS="-L$(CURDIR)/obj_sysroot/$(TARGET)/lib $(LDFLAGS)" \
	DLLTOOL="$(DLLTOOL)" \
	AS="$(XAS)" AR="$(XAR)" RANLIB="$(XRANLIB)" \
	NM="$(XNM)" \
	OBJCOPY="$(XOBJCOPY)" \
	OBJDUMP="$(XOBJDUMP)" \
	READELF="$(XREADELF)" \
	STRIP="$(XSTRIP)"
FULL_MINGW_CRT_CONFIG += RC="$(XRC)" \
	CC="$(XGCC)" \
	CXX="$(XGXX)" \
	CPP="$(XCPP)" CPPFLAGS="-I$(CURDIR)/obj_sysroot/$(TARGET)/include" \
	LD="$(XLD)" LDFLAGS="-L$(CURDIR)/obj_sysroot/$(TARGET)/lib $(LDFLAGS)" \
	DLLTOOL="$(DLLTOOL)" \
	AS="$(XAS)" AR="$(XAR)" RANLIB="$(XRANLIB)" \
	NM="$(XNM)" \
	OBJCOPY="$(XOBJCOPY)" \
	OBJDUMP="$(XOBJDUMP)" \
	READELF="$(XREADELF)" \
	STRIP="$(XSTRIP)"

obj_mingw_headers/.lc_configured: | obj_binutils/.lc_built
obj_mingw_crt/.lc_configured: | obj_sysroot/.lc_headers obj_gcc/gcc/.lc_built obj_binutils/.lc_built
obj_mingw_pthreads/.lc_configured: | obj_sysroot/.lc_headers obj_gcc/gcc/.lc_built obj_binutils/.lc_built obj_sysroot/.lc_libs_crt
obj_musl/.lc_configured: | obj_gcc/gcc/.lc_built
obj_musl/.lc_built: | obj_gcc/$(TARGET)/libgcc/libgcc.a
obj_gcc/.lc_configured: obj_binutils/.lc_built

else
# build native
FULL_BINUTILS_CONFIG += --host=$(HOST)
FULL_GCC_CONFIG += --host=$(HOST)

# prevent parallelization of obj_musl/.lc_built and obj_sysroot/.lc_headers
obj_musl/.lc_built: | obj_sysroot/.lc_headers
obj_gcc/gcc/.lc_built: | obj_sysroot/.lc_headers

endif

ifeq ($(TARGET),)

all:
	@echo TARGET must be set.
	@exit 1

install: all

else

ifeq ($(MUSL_SRCDIR),)
all: mingw gcc binutils
install: install-mingw install-gcc install-binutils
	(cd $(DESTDIR)$(OUTPUT) && ln -sf . usr)
else
all: musl gcc binutils
install: install-musl install-gcc install-binutils
	(cd $(DESTDIR)$(OUTPUT) && ln -sf . usr)
endif

musl: obj_musl/.lc_built

mingw: obj_mingw_headers/.lc_built obj_mingw_crt/.lc_built obj_mingw_pthreads/.lc_built

toolchain: gcc binutils

install-toolchain: install-gcc install-binutils

gcc: obj_gcc/.lc_built

binutils: obj_binutils/.lc_built

.PHONY: all musl mingw toolchain install-musl install-mingw install-toolchain clean

src_binutils: | $(BINUTILS_SRCDIR)
	ln -sf $(BINUTILS_SRCDIR) $@

src_gcc_base: | $(GCC_SRCDIR)
	ln -sf $(GCC_SRCDIR) $@

src_musl: | $(MUSL_SRCDIR)
	ln -sf $(MUSL_SRCDIR) $@

src_mingw: | $(MINGW_SRCDIR)
	ln -sf $(MINGW_SRCDIR) $@

ifneq ($(GMP_SRCDIR),)
src_gcc: src_gmp
src_gmp: | $(GMP_SRCDIR)
	ln -sf "$(GMP_SRCDIR)" $@
endif

ifneq ($(MPC_SRCDIR),)
src_gcc: src_mpc
src_mpc: | $(MPC_SRCDIR)
	ln -sf "$(MPC_SRCDIR)" $@
endif

ifneq ($(MPFR_SRCDIR),)
src_gcc: src_mpfr
src_mpfr: | $(MPFR_SRCDIR)
	ln -sf "$(MPFR_SRCDIR)" $@
endif

ifneq ($(ISL_SRCDIR),)
src_gcc: src_isl
src_isl: | $(ISL_SRCDIR)
	ln -sf "$(ISL_SRCDIR)" $@
endif

src_gcc: src_gcc_base
	rm -rf $@ $@.tmp
	mkdir $@.tmp
	cd $@.tmp && ln -sf ../src_gcc_base/* .
	$(if $(GMP_SRCDIR),cd $@.tmp && ln -sf ../src_gmp gmp)
	$(if $(MPC_SRCDIR),cd $@.tmp && ln -sf ../src_mpc mpc)
	$(if $(MPFR_SRCDIR),cd $@.tmp && ln -sf ../src_mpfr mpfr)
	$(if $(ISL_SRCDIR),cd $@.tmp && ln -sf ../src_isl isl)
	mv $@.tmp $@

obj_%:
	mkdir -p $@

obj_sysroot/include:
	mkdir -p $@

obj_sysroot/usr: | obj_sysroot
	ln -sf . $@

obj_sysroot/lib32: | obj_sysroot
	ln -sf lib $@

obj_sysroot/lib64: | obj_sysroot
	ln -sf lib $@

ifneq ($(HOST),)
# native build
obj_gcc/.lc_configured: export CC_FOR_TARGET:=$(TARGET)-gcc$(EXE_EXT) $(STAT)
obj_gcc/.lc_configured: export CXX_FOR_TARGET:=$(TARGET)-g++$(EXE_EXT) $(STAT)
obj_gcc/.lc_configured: export CC_FOR_BUILD:=$(CC) $(STAT)
obj_gcc/.lc_configured: export CXX_FOR_BUILD:=$(CXX) $(STAT)
obj_binutils/.lc_configured: export CC_FOR_TARGET:=$(TARGET)-gcc$(EXE_EXT) $(STAT)
obj_binutils/.lc_configured: export CXX_FOR_TARGET:=$(TARGET)-g++$(EXE_EXT) $(STAT)
obj_binutils/.lc_configured: export CC_FOR_BUILD:=$(CC) $(STAT)
obj_binutils/.lc_configured: export CXX_FOR_BUILD:=$(CXX) $(STAT)
else
obj_gcc/.lc_configured: export CC:=$(CC) $(STAT)
obj_gcc/.lc_configured: export CXX:=$(CXX) $(STAT)
obj_binutils/.lc_configured: export CC:=$(CC) $(STAT)
obj_binutils/.lc_configured: export CXX:=$(CXX) $(STAT)
endif
obj_gcc/.lc_configured: export LDFLAGS:=$(LDFLAGS) $(STAT)
obj_binutils/.lc_configured: export LDFLAGS:=$(LDFLAGS) $(STAT)

obj_binutils/.lc_configured: | obj_binutils src_binutils
	cd obj_binutils && ../src_binutils/configure $(FULL_BINUTILS_CONFIG) || (cat config.log && exit 1)
	touch $@

obj_binutils/.lc_built: | obj_binutils/.lc_configured
	cd obj_binutils && $(MAKE) $(MAKE_ARGS) $(COMMON_MAKE_ARGS) $(BINUTILS_MAKE_ARGS) MAKE="$(MAKE) $(TOOLCHAIN_MAKE_ARGS)" all
	touch $@

obj_gcc/.lc_configured: | obj_gcc src_gcc
	cd obj_gcc && ../src_gcc/configure $(FULL_GCC_CONFIG) || (cat config.log && exit 1)
	touch $@

ifneq ($(MINGW_SRCDIR),)
# build mingw
obj_gcc/gcc/.lc_built: | obj_sysroot/.lc_headers
endif
obj_gcc/gcc/.lc_built: | obj_sysroot/usr obj_sysroot/lib32 obj_sysroot/lib64 obj_sysroot/include
obj_gcc/gcc/.lc_built: | obj_gcc/.lc_configured
	cd obj_gcc && $(MAKE) $(MAKE_ARGS) $(COMMON_MAKE_ARGS) $(GCC_MAKE_ARGS) MAKE="$(MAKE) $(TOOLCHAIN_MAKE_ARGS)" all-gcc
	touch $@

obj_musl/.lc_configured: | obj_musl src_musl
	cd obj_musl && ../src_musl/configure $(FULL_MUSL_CONFIG) || (cat config.log && exit 1)
	touch $@

obj_mingw/.lc_configured: | obj_mingw src_mingw obj_mingw_headers/.lc_configured obj_mingw_crt/.lc_configured
	touch $@

ifeq ($(MUSL_SRCDIR),)
# mingw
obj_sysroot/.lc_headers: | obj_mingw_headers/.lc_configured obj_sysroot
	cd obj_mingw_headers && $(MAKE) $(MAKE_ARGS) DESTDIR=$(CURDIR)/obj_sysroot/$(TARGET) install
	rm -f $(CURDIR)/obj_sysroot/mingw
	ln -s $(TARGET) $(CURDIR)/obj_sysroot/mingw
	touch $@
else
# musl
obj_sysroot/.lc_headers: | obj_musl/.lc_configured obj_sysroot
	cd obj_musl && $(MAKE) $(MAKE_ARGS) $(MUSL_MAKE_ARGS) DESTDIR=$(CURDIR)/obj_sysroot install-headers
	touch $@
endif

obj_gcc/$(TARGET)/libgcc/libgcc.a: | obj_sysroot/.lc_headers
	cd obj_gcc && $(MAKE) $(MAKE_ARGS) $(COMMON_MAKE_ARGS) $(GCC_MAKE_ARGS) MAKE="$(MAKE) enable_shared=no $(TOOLCHAIN_MAKE_ARGS)" all-target-libgcc

obj_musl/.lc_built: | obj_musl/.lc_configured
	cd obj_musl && $(MAKE) $(MAKE_ARGS) $(MUSL_MAKE_ARGS)
	touch $@

ifeq ($(MUSL_SRCDIR),)
# mingw
obj_sysroot/.lc_libs: | obj_sysroot/.lc_libs_pthreads obj_sysroot/.lc_libs_crt
	touch $@
else
# musl
obj_sysroot/.lc_libs: | obj_musl/.lc_built
	cd obj_musl && $(MAKE) $(MAKE_ARGS) $(MUSL_MAKE_ARGS) DESTDIR=$(CURDIR)/obj_sysroot install
	touch $@
endif

obj_gcc/.lc_built: | obj_sysroot/.lc_libs obj_sysroot/.lc_headers
obj_gcc/.lc_built: | obj_gcc/gcc/.lc_built
	cd obj_gcc && $(MAKE) $(MAKE_ARGS) $(COMMON_MAKE_ARGS) $(GCC_MAKE_ARGS) MAKE="$(MAKE) $(TOOLCHAIN_MAKE_ARGS)"
	touch $@

install-musl: | obj_musl/.lc_built
	cd obj_musl && $(MAKE) $(MAKE_ARGS) $(MUSL_MAKE_ARGS) DESTDIR=$(DESTDIR)$(OUTPUT)$(SYSROOT) install

install-binutils: | obj_binutils/.lc_built
	cd obj_binutils && $(MAKE) $(MAKE_ARGS) $(COMMON_MAKE_ARGS) $(BINUTILS_MAKE_ARGS) MAKE="$(MAKE) $(TOOLCHAIN_MAKE_ARGS)" DESTDIR=$(DESTDIR)$(OUTPUT) install

install-gcc: | obj_gcc/.lc_built
	cd obj_gcc && $(MAKE) $(MAKE_ARGS) $(COMMON_MAKE_ARGS) $(GCC_MAKE_ARGS) MAKE="$(MAKE) $(TOOLCHAIN_MAKE_ARGS)" DESTDIR=$(DESTDIR)$(OUTPUT) install

obj_mingw_headers/.lc_configured: | obj_mingw_headers src_mingw
	cd obj_mingw_headers && ../src_mingw/mingw-w64-headers/configure $(FULL_MINGW_HEADERS_CONFIG) || (cat config.log && exit 1)
	touch $@

obj_mingw_headers/.lc_built: | obj_mingw_headers/.lc_configured
	cd obj_mingw_headers && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS)
	touch $@

obj_mingw_crt/.lc_configured: | obj_sysroot/.lc_headers obj_binutils/.lc_built obj_gcc/gcc/.lc_built obj_mingw_crt src_mingw
	cd obj_mingw_crt && ../src_mingw/mingw-w64-crt/configure $(FULL_MINGW_CRT_CONFIG) || (cat config.log && exit 1)
	touch $@

obj_mingw_crt/.lc_built: | obj_mingw_crt/.lc_configured
	cd obj_mingw_crt && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS)
	touch $@

obj_mingw_pthreads/.lc_configured: | obj_mingw_crt/.lc_built obj_mingw_pthreads src_mingw
	cd obj_mingw_pthreads && ../src_mingw/mingw-w64-libraries/winpthreads/configure $(FULL_MINGW_PTHREADS_CONFIG) || (cat config.log && exit 1)
	touch $@

obj_mingw_pthreads/.lc_built: | obj_mingw_pthreads/.lc_configured
	cd obj_mingw_pthreads && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS)
	touch $@

obj_sysroot/.lc_libs_pthreads: | obj_mingw_pthreads/.lc_built
	cd obj_mingw_pthreads && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS) DESTDIR=$(CURDIR)/obj_sysroot/$(TARGET) install
	touch $@

obj_sysroot/.lc_libs_crt: | obj_mingw_crt/.lc_built
	cd obj_mingw_crt && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS) DESTDIR=$(CURDIR)/obj_sysroot/$(TARGET) install
	touch $@

install-mingw-headers: | obj_mingw_headers/.lc_configured
	cd obj_mingw_headers && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS) DESTDIR=$(DESTDIR)$(OUTPUT)$(SYSROOT) install

install-mingw-crt: | obj_mingw_crt/.lc_built
	cd obj_mingw_crt && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS) DESTDIR=$(DESTDIR)$(OUTPUT)$(SYSROOT) install

install-mingw-pthreads: | obj_mingw_pthreads/.lc_built
	cd obj_mingw_pthreads && $(MAKE) $(MAKE_ARGS) $(MINGW_MAKE_ARGS) DESTDIR=$(DESTDIR)$(OUTPUT)$(SYSROOT) install

install-mingw: | install-mingw-headers install-mingw-crt install-mingw-pthreads

ifneq ($(LINUX_SRCDIR),)
TARGET_ARCH = $(firstword $(subst -, ,$(TARGET)))
TARGET_ARCH_MANGLED = $(patsubst i%86,x86,$(patsubst aarch64%,arm64%,$(patsubst or1k%,openrisc%,$(TARGET_ARCH))))
LINUX_ARCH_LIST = $(sort $(notdir $(wildcard $(LINUX_SRCDIR)/arch/*)))
LINUX_ARCH = $(lastword $(foreach a,$(LINUX_ARCH_LIST),$(if $(filter $(a)%,$(TARGET_ARCH_MANGLED)),$(a))))
ifneq ($(LINUX_ARCH),)
all: kernel-headers
install: install-kernel-headers
kernel-headers: | obj_kernel_headers/.lc_built
src_kernel_headers: | $(LINUX_SRCDIR)
	ln -sf "$(LINUX_SRCDIR)" $@
obj_kernel_headers/.lc_built: | src_kernel_headers
	mkdir -p $(CURDIR)/obj_kernel_headers/staged
	cd src_kernel_headers && $(MAKE) $(MAKE_ARGS) ARCH=$(LINUX_ARCH) O=$(CURDIR)/obj_kernel_headers INSTALL_HDR_PATH=$(CURDIR)/obj_kernel_headers/staged HOSTCC="$(CC) $(STAT)" headers_install
	find obj_kernel_headers/staged/include '(' -name .install -o -name ..install.cmd ')' -exec rm {} +
	touch $@
install-kernel-headers: | obj_kernel_headers/.lc_built
	mkdir -p $(DESTDIR)$(OUTPUT)$(SYSROOT)/include
	cp -R obj_kernel_headers/staged/include/* $(DESTDIR)$(OUTPUT)$(SYSROOT)/include
endif
endif

endif

clean:
	rm -rf src_* obj_*
